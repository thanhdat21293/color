'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.htmlParser = exports.dataParser = exports.scriptParser = exports.layoutParser = exports.componentParser = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _htmlMinifier = require('html-minifier');

var _htmlMinifier2 = _interopRequireDefault(_htmlMinifier);

var _models = require('../models');

var _requireFromString = require('require-from-string');

var _requireFromString2 = _interopRequireDefault(_requireFromString);

var _pug = require('pug');

var _pug2 = _interopRequireDefault(_pug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var htmlMinifier = _htmlMinifier2.default.minify;

var htmlRegex = /(<template.*?>)([\s\S]*?)(<\/template>)/gm;
var scriptRegex = /(<script.*?>)([\s\S]*?)(<\/script>)/gm;
var templateRegex = /\w*\.vue/g;

function htmlParser(body, minify) {
    var bodyArray = body.match(htmlRegex) || [];
    var bodyString = bodyArray[0];
    var templateLang = bodyString.replace(htmlRegex, '$1');
    if (bodyString) {
        bodyString = bodyString.replace(htmlRegex, '$2');
        if (templateLang.includes('lang="pug"') || templateLang.includes('lang="jade"')) {
            bodyString = _pug2.default.compile(bodyString, {})({});
        }
    }

    if (minify) {
        bodyString = htmlMinifier(bodyString, {
            collapseWhitespace: true
        });
    }

    return bodyString;
}

function dataParser(script, defaults, type) {
    var finalScript = {};
    for (var element in script) {
        if (script.hasOwnProperty(element)) {
            if (element === 'data') {
                (function () {
                    var data = new _models.DataObject(script.data(), defaults.options.data, type).data;
                    finalScript[element] = function () {
                        return data;
                    };
                })();
            } else {
                finalScript[element] = script[element];
            }
        }
    }
    return finalScript;
}

function scriptParser(script, defaults, type) {
    var options = {
        'presets': ['es2015']
    };
    var scriptArray = script.match(scriptRegex) || [];
    if (scriptArray.length === 0) {
        var error = 'I had an error processing this script.\n' + script;
        console.error(error);
        return null;
    }
    var scriptString = scriptArray[0].replace(scriptRegex, '$2');
    var babelScript = require('babel-core').transform(scriptString, options);
    var evalScript = (0, _requireFromString2.default)(babelScript.code);
    var finalScript = dataParser(evalScript.default, defaults, type);
    return finalScript;
}

function layoutParser(layoutPath, defaults, type) {
    return new Promise(function (resolve) {
        _fs2.default.readFile(layoutPath, 'utf-8', function (err, content) {
            if (err) {
                content = defaults.backupLayout;
                // let error = `Could not find the layout, I was expecting it to live here
                // ${layoutPath}
                // But I couldn't find it there ¯\_(ツ)_/¯
                // So I'm using the default layout`;
                // console.warn(error)
            }

            var body = htmlParser(content, false);
            content = content.replace(htmlRegex, '');
            var script = scriptParser(content, defaults, type);

            resolve({
                type: type,
                template: body,
                script: script
            });
        });
    });
}

function componentParser(templatePath, defaults, type) {
    return new Promise(function (resolve, reject) {
        _fs2.default.readFile(templatePath, 'utf-8', function (err, content) {
            if (err) {
                var error = 'Could Not Find Component, I was expecting it to live here \n' + templatePath + ' \nBut I couldn\'t find it there, \xAF\\_(\u30C4)_/\xAF\n\n';
                console.error(error);
                reject(error);
            } else {
                var body = htmlParser(content, true);
                content = content.replace(htmlRegex, '');
                var script = scriptParser(content, defaults, type);
                var templateArray = templatePath.match(templateRegex) || [];

                if (templateArray.length === 0) {
                    var _error = 'I had an error processing component templates. in this file \n' + templatePath;
                    console.error(_error);
                    reject(_error);
                }

                var templateName = templateArray[0].replace('\.vue', '');
                var componentScript = script || {};
                componentScript.template = body;

                resolve({
                    type: type,
                    name: templateName,
                    script: componentScript
                });
            }
        });
    });
}

exports.componentParser = componentParser;
exports.layoutParser = layoutParser;
exports.scriptParser = scriptParser;
exports.dataParser = dataParser;
exports.htmlParser = htmlParser;